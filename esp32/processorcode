#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <NTPClient.h>
#include <WiFiUdp.h>

// --- WiFi Credentials ---
const char* ssid = "m";               // Your WiFi SSID
const char* password = "aaaaaaaa";    // Your WiFi Password

// --- Backend Server URL ---
const char* serverUrl = "https://trafficturbine.onrender.com/api/data";  // Your backend URL

// --- Device ID ---
const char* deviceId = "3";           // Set your device ID here

// --- Sensor Pins ---
#define VOLTAGE_PIN 34
#define CURRENT_PIN 35

// --- Sampling Parameters ---
const int SAMPLING_INTERVAL = 100;      // ms between readings
const int SAMPLING_DURATION = 15000;    // 15 seconds total sampling time
const int SAMPLE_COUNT = SAMPLING_DURATION / SAMPLING_INTERVAL;

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("ESP32 Starting...");

  connectToWiFi();
}

void loop() {
  Serial.println("\nStarting new measurement cycle...");

  float voltageSum = 0;
  float currentSum = 0;

  // Take multiple samples over 15 seconds
  for (int i = 0; i < SAMPLE_COUNT; i++) {
    voltageSum += readVoltage();
    currentSum += readCurrent();
    delay(SAMPLING_INTERVAL);
  }

  // Calculate averages
  float avgVoltage = voltageSum / SAMPLE_COUNT;
  float avgCurrent = currentSum / SAMPLE_COUNT;
  float avgPower = avgVoltage * avgCurrent;  // Watts
  float energy = avgPower * (SAMPLING_DURATION / 1000.0);  // Joules (Watt-seconds)

  // Simulated battery level (replace with actual sensor if available)
  int batteryLevel = 98;

  // Print data to Serial Monitor
  Serial.printf("Voltage: %.2f V\n", avgVoltage);
  Serial.printf("Current: %.2f A\n", avgCurrent);
  Serial.printf("Power: %.2f W\n", avgPower);
  Serial.printf("Energy: %.3f J\n", energy);
  Serial.printf("Battery Level: %d %%\n", batteryLevel);

  // Create JSON document (no time field, includes deviceId)
  DynamicJsonDocument doc(256);
  doc["voltage"] = avgVoltage;
  doc["current"] = avgCurrent;
  doc["power"] = avgPower;
  doc["energy"] = energy;
  doc["batteryLevel"] = batteryLevel;
  doc["deviceId"] = deviceId;

  sendData(doc);

  Serial.println("Data POST attempt complete. Waiting for next cycle...");
  delay(5000);  // Wait 5 seconds before next cycle
}

// --- WiFi Connection with Handshake Test ---
void connectToWiFi() {
  Serial.printf("Connecting to WiFi SSID: %s\n", ssid);
  WiFi.begin(ssid, password);

  int retries = 0;
  const int maxRetries = 40;  // ~20 seconds timeout

  while (WiFi.status() != WL_CONNECTED && retries < maxRetries) {
    delay(500);
    Serial.print(".");
    retries++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nWiFi connected!");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\nFailed to connect to WiFi. Restarting...");
    ESP.restart();
  }
}

// --- Send JSON Data to Backend with Debugging ---
void sendData(DynamicJsonDocument& doc) {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi not connected. Skipping HTTP POST.");
    return;
  }

  HTTPClient http;
  Serial.print("Connecting to backend at: ");
  Serial.println(serverUrl);

  http.begin(serverUrl); // For HTTPS, this is fine for Render

  http.addHeader("Content-Type", "application/json");

  String json;
  serializeJson(doc, json);

  Serial.println("JSON Payload to be sent:");
  Serial.println(json);

  int httpCode = http.POST(json);

  if (httpCode > 0) {
    Serial.printf("POST Response code: %d\n", httpCode);
    String response = http.getString();
    Serial.println("Server response: " + response);

    if (httpCode == 200 || httpCode == 201) {
      Serial.println("POST successful!");
    } else {
      Serial.println("POST received non-success status.");
    }
  } else {
    Serial.printf("POST failed, error: %s\n", http.errorToString(httpCode).c_str());
    if (httpCode == HTTPC_ERROR_CONNECTION_REFUSED) {
      Serial.println("Connection refused by server. Check backend status and URL.");
    } else if (httpCode == HTTPC_ERROR_SEND_HEADER_FAILED) {
      Serial.println("Failed to send HTTP header.");
    } else if (httpCode == HTTPC_ERROR_SEND_PAYLOAD_FAILED) {
      Serial.println("Failed to send HTTP payload.");
    } else if (httpCode == HTTPC_ERROR_NOT_CONNECTED) {
      Serial.println("Not connected to server.");
    } else if (httpCode == HTTPC_ERROR_CONNECTION_LOST) {
      Serial.println("Connection lost during POST.");
    }
  }
  http.end();
}

// --- Sensor Reading Functions ---

float readVoltage() {
  const float VOLTAGE_DIVIDER_RATIO = 5.0;  // Adjust for your hardwarea
  int raw = analogRead(VOLTAGE_PIN);
  float voltage = (raw / 4095.0) * 3.3;
  return voltage * VOLTAGE_DIVIDER_RATIO;
}

float readCurrent() {
  int raw = analogRead(CURRENT_PIN);
  float voltage = (raw / 4095.0) * 3.3;
  const float ZERO_CURRENT_VOLTAGE = 2.5;  // ACS712 zero current voltage
  const float SENSITIVITY = 0.185;          // ACS712 sensitivity (V/A)
  return (voltage - ZERO_CURRENT_VOLTAGE) / SENSITIVITY;
}
