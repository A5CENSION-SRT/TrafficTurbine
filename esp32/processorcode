#include <WiFi.h>
#include <HTTPClient.h>
#include <ArduinoJson.h>
#include <Wire.h>
#include <Adafruit_INA219.h>
#include <math.h>

const char* ssid = "m";
const char* password = "wifi-password";

const char* serverUrl = "https://trafficturbine.onrender.com/api/data";
const char* deviceId = "3";

Adafruit_INA219 ina219;

const int ACS712_PIN = 34;
const float ACS712_SENSITIVITY = 0.185;
float acs712_zeroPoint;

const int SAMPLING_INTERVAL = 100;
const int SAMPLING_DURATION = 15000;
const int SAMPLE_COUNT = SAMPLING_DURATION / SAMPLING_INTERVAL;

void calibrateACS712();
float readCurrent_ACS712();
void connectToWiFi();
void sendData(DynamicJsonDocument& doc);

void setup() {
  Serial.begin(115200);
  delay(1000);
  Serial.println("--- ESP32 Combined Project Starting ---");

  Serial.println("Initializing INA219 voltage sensor...");
  if (!ina219.begin()) {
    Serial.println("Failed to find INA219 chip! Halting execution.");
    while (1) { delay(10); }
  }
  Serial.println("INA219 Initialized.");

  Serial.println("Calibrating ACS712 current sensor...");
  calibrateACS712();

  connectToWiFi();
}

void loop() {
  Serial.println("\n>>> Starting new measurement cycle...");

  float voltageSum = 0;
  float currentSum = 0;

  Serial.printf("Sampling data for %d seconds...\n", SAMPLING_DURATION / 1000);
  for (int i = 0; i < SAMPLE_COUNT; i++) {
    voltageSum += ina219.getBusVoltage_V();
    currentSum += readCurrent_ACS712();
    delay(SAMPLING_INTERVAL);
  }

  float avgVoltage = voltageSum / SAMPLE_COUNT;
  float avgCurrent = currentSum / SAMPLE_COUNT;
  float avgPower = avgVoltage * avgCurrent;
  float energy = avgPower * (SAMPLING_DURATION / 1000.0);

  int batteryLevel = 98;

  Serial.println("--- Cycle Averages ---");
  Serial.printf("Voltage: %.2f V\n", avgVoltage);
  Serial.printf("Current: %.3f A\n", avgCurrent);
  Serial.printf("Power:   %.2f W\n", avgPower);
  Serial.printf("Energy:  %.3f J\n", energy);
  Serial.printf("Battery: %d %%\n", batteryLevel);
  Serial.println("----------------------");

  DynamicJsonDocument doc(256);
  doc["voltage"] = avgVoltage;
  doc["current"] = avgCurrent;
  doc["power"] = avgPower;
  doc["energy"] = energy;
  doc["batteryLevel"] = batteryLevel;
  doc["deviceId"] = deviceId;

  sendData(doc);

  Serial.println("Data POST attempt complete. Waiting 5 seconds for next cycle...");
  delay(5000);
}

void calibrateACS712() {
  float sum = 0;
  for (int i = 0; i < 100; i++) {
    sum += analogRead(ACS712_PIN);
    delay(10);
  }

  acs712_zeroPoint = (sum / 100) * 3.3 / 4095.0;
  Serial.print("ACS712 Calibration Complete. Zero Point: ");
  Serial.print(acs712_zeroPoint, 3);
  Serial.println("V");
}

float readCurrent_ACS712() {
  int raw = analogRead(ACS712_PIN);
  float voltage = raw * 3.3 / 4095.0;
  float current = (voltage - acs712_zeroPoint) / (ACS712_SENSITIVITY * (2.0 / 3.0));
  return fabs(current);
}

void connectToWiFi() {
  Serial.printf("Connecting to WiFi SSID: %s\n", ssid);
  WiFi.begin(ssid, password);

  int retries = 0;
  const int maxRetries = 40;

  while (WiFi.status() != WL_CONNECTED && retries < maxRetries) {
    delay(500);
    Serial.print(".");
    retries++;
  }

  if (WiFi.status() == WL_CONNECTED) {
    Serial.println("\nWiFi connected!");
    Serial.print("IP Address: ");
    Serial.println(WiFi.localIP());
  } else {
    Serial.println("\nFailed to connect to WiFi. Restarting...");
    ESP.restart();
  }
}

void sendData(DynamicJsonDocument& doc) {
  if (WiFi.status() != WL_CONNECTED) {
    Serial.println("WiFi not connected. Skipping HTTP POST.");
    return;
  }

  HTTPClient http;
  Serial.print("Connecting to backend at: ");
  Serial.println(serverUrl);

  http.begin(serverUrl);
  http.addHeader("Content-Type", "application/json");

  String jsonPayload;
  serializeJson(doc, jsonPayload);

  Serial.println("JSON Payload to be sent:");
  Serial.println(jsonPayload);

  int httpCode = http.POST(jsonPayload);

  if (httpCode > 0) {
    Serial.printf("POST Response code: %d\n", httpCode);
    String response = http.getString();
    Serial.println("Server response: " + response);

    if (httpCode == 200 || httpCode == 201) {
      Serial.println("POST successful!");
    } else {
      Serial.println("POST received non-success status.");
    }
  } else {
    Serial.printf("POST failed, error: %s\n", http.errorToString(httpCode).c_str());
  }
  http.end();
}
